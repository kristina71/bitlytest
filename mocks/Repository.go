// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	context "context"

	models "github.com/kristina71/bitlytest/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Delete provides a mock function with given fields: ctx, url
func (_m *Repository) Delete(ctx context.Context, url models.Url) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Url) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GenerateUrl provides a mock function with given fields: ctx
func (_m *Repository) GenerateUrl(ctx context.Context) string {
	ret := _m.Called(ctx)

	var r0 string
	if rf, ok := ret.Get(0).(func(context.Context) string); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// Get provides a mock function with given fields: ctx
func (_m *Repository) Get(ctx context.Context) ([]models.Url, error) {
	ret := _m.Called(ctx)

	var r0 []models.Url
	if rf, ok := ret.Get(0).(func(context.Context) []models.Url); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySmallUrl provides a mock function with given fields: ctx, url
func (_m *Repository) GetBySmallUrl(ctx context.Context, url models.Url) (models.Url, error) {
	ret := _m.Called(ctx, url)

	var r0 models.Url
	if rf, ok := ret.Get(0).(func(context.Context, models.Url) models.Url); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(models.Url)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Url) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: ctx, url
func (_m *Repository) Insert(ctx context.Context, url models.Url) (uint16, error) {
	ret := _m.Called(ctx, url)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(context.Context, models.Url) uint16); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, models.Url) error); ok {
		r1 = rf(ctx, url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: ctx, url
func (_m *Repository) Update(ctx context.Context, url models.Url) error {
	ret := _m.Called(ctx, url)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, models.Url) error); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ValidateUrl provides a mock function with given fields: ctx, url
func (_m *Repository) ValidateUrl(ctx context.Context, url string) bool {
	ret := _m.Called(ctx, url)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, string) bool); ok {
		r0 = rf(ctx, url)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}
