// Code generated by mockery v2.8.0. DO NOT EDIT.

package mocks

import (
	models "bitlytest/pkg/models"
	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

// Delete provides a mock function with given fields: url
func (_m *Storage) Delete(url models.Url) error {
	ret := _m.Called(url)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Url) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Get provides a mock function with given fields:
func (_m *Storage) Get() ([]models.Url, error) {
	ret := _m.Called()

	var r0 []models.Url
	if rf, ok := ret.Get(0).(func() []models.Url); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]models.Url)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetBySmallUrl provides a mock function with given fields: url
func (_m *Storage) GetBySmallUrl(url models.Url) (models.Url, error) {
	ret := _m.Called(url)

	var r0 models.Url
	if rf, ok := ret.Get(0).(func(models.Url) models.Url); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(models.Url)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Insert provides a mock function with given fields: url
func (_m *Storage) Insert(url models.Url) (uint16, error) {
	ret := _m.Called(url)

	var r0 uint16
	if rf, ok := ret.Get(0).(func(models.Url) uint16); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Get(0).(uint16)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(models.Url) error); ok {
		r1 = rf(url)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Update provides a mock function with given fields: url
func (_m *Storage) Update(url models.Url) error {
	ret := _m.Called(url)

	var r0 error
	if rf, ok := ret.Get(0).(func(models.Url) error); ok {
		r0 = rf(url)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
